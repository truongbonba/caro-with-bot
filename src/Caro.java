
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.OptionPaneUI;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Truong
 */
public class Caro extends javax.swing.JFrame {
    boolean turn = true;
    int robotRow = -1;
    int robotCol = -1;
    int personRow = -1;
    int personCol = -1;
    
    boolean done = false;
    /**
     * Creates new form NewJFrame
     */
    public Caro() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAlignmentX(1.0F);
        jTable1.setAlignmentY(1.0F);
        jTable1.setAutoscrolls(false);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setEditingColumn(1);
        jTable1.setEditingRow(1);
        jTable1.setGridColor(new java.awt.Color(255, 255, 0));
        jTable1.setIntercellSpacing(new java.awt.Dimension(10, 10));
        jTable1.setRowHeight(30);
        jTable1.setRowMargin(10);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void isWin(String s, String notS, int x, int y) {
        if (countWin(s, notS, x, y) >= 5) {
            JOptionPane.showMessageDialog(null, s + " is Winner!");
            done = true;
            new Caro().setVisible(true);
        }
    }
       
    private int countWin(String s, String notS, int x, int y) {
        short countLine = 1;
        short twoHeadLimit;
        short five;
        int i;
        
        //hang ngang
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x + i) < 15 && jTable1.getValueAt(x + i, y) == s) {
            five++;
            i++;
        }
        if ((x + i) < 15 && jTable1.getValueAt(x + i, y) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((x - i) >= 0 && jTable1.getValueAt(x - i, y) == s) {
            five++;
            i++;
        }
        if ((x - i) >= 0 && jTable1.getValueAt(x - i, y) == notS) {
            twoHeadLimit++;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
                
        //hang doc
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((y + i) < 15 && jTable1.getValueAt(x, y + i) == s) {
            five++;
            i++;
        }
        if ((y + i) < 15 && jTable1.getValueAt(x, y + i) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == s) {
            five++;
            i++;
        }
        if ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == notS) {
            twoHeadLimit++;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
                        
        //hang cheo /
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == s) {
            five++;
            i++;
        }
        if ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == s) {
            five++;
            i++;
        }
        if ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == notS) {
            twoHeadLimit++;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
        
        //hang cheo \
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == s) {
            five++;
            i++;
        }
        if ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == s) {
            five++;
            i++;
        }
        if ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == notS) {
            twoHeadLimit++;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
        
        return countLine;
    }
     
    private int countLine(String s, String notS, int x, int y) {
        short countLine = 1;
        short twoHeadLimit;
        short five;
        int i;
        
        //hang ngang
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x + i) < 15) {
            if (jTable1.getValueAt(x + i, y) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x + i, y) == null) {
                while ((x + i + 1) < 15 && jTable1.getValueAt(x + i + 1, y) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((x + i) < 15 && jTable1.getValueAt(x + i, y) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((x - i) >= 0) {
            if (jTable1.getValueAt(x - i, y) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x - i, y) == null) {
                while ((x + i - 1) < 15 && jTable1.getValueAt(x + i - 1, y) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((x - i) >= 0 && jTable1.getValueAt(x - i, y) == notS) {
            twoHeadLimit++;
        }
        if (twoHeadLimit == 1) {
            five--;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
                
        //hang doc
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((y + i) < 15) {
            if (jTable1.getValueAt(x, y + i) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x, y + i) == null) {
                while ((y + i) < 15 && jTable1.getValueAt(x, y + i) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((y + i) < 15 && jTable1.getValueAt(x, y + i) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((y - i) >= 0) {
            if (jTable1.getValueAt(x, y - i) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x, y - i) == null) {
                while ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == notS) {
            twoHeadLimit++;
        }
        if (twoHeadLimit == 1) {
            five--;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
                        
        //hang cheo /
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x + i) < 15 && (y - i) >= 0) {
            if (jTable1.getValueAt(x + i, y - i) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x + i, y - i) == null) {
                while ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((x - i) >= 0 && (y + i) < 15) {
            if (jTable1.getValueAt(x - i, y + i) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x - i, y + i) == null) {
                while ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == notS) {
            twoHeadLimit++;
        }
        if (twoHeadLimit == 1) {
            five--;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
        
        //hang cheo \
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x - i) >= 0 && (y - i) >= 0) {
            if (jTable1.getValueAt(x - i, y - i) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x - i, y - i) == null) {
                while ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == notS) {
            twoHeadLimit++;
        }
        
        i = 1;
        while ((x + i) < 15 && (y + i) < 15) {
            if (jTable1.getValueAt(x + i, y + i) == s) {
                five++;
                i++;
            } else if (jTable1.getValueAt(x + i, y + i) == null) {
                while ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == s) {
                    five++;
                    i++;
                }
                break;
            } else {
                break;
            }
        }
        if ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == notS) {
            twoHeadLimit++;
        }
        if (twoHeadLimit == 1) {
            five--;
        }
        
        if (five > countLine && twoHeadLimit < 2) {
            countLine = five;
        }
        
        return countLine;
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int curRow = jTable1.getSelectedRow();
        int curCol = jTable1.getSelectedColumn();
        if (jTable1.getValueAt(curRow, curCol) == null) {
            if (turn) {
                jTable1.setValueAt("X", curRow, curCol);
                isWin("X", "O", curRow, curCol);
                turn = false;
            } else {
                jTable1.setValueAt("O", curRow, curCol);
                isWin("O", "X", curRow, curCol);
                turn = true;
            }
//            if (turn && done == false) {
//                robot("X", "O");
//            } else if(done == false){
//                robot("O", "X");
//            }
            new sleep().start();
            
        }        
    }//GEN-LAST:event_jTable1MouseClicked

    class sleep extends Thread{

        @Override
        public void run() {
            try {
                while (true) {
                    if (turn && done == false) {
                        robot("X", "O");
                    } else if(done == false){
                        robot("O", "X");
                    }
                    Thread.sleep(1000);
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(Caro.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
    private void robot(String s, String notS) {
        int curRow = jTable1.getSelectedRow();
        int curCol = jTable1.getSelectedColumn();
        if (robotRow != -1 && robotCol != -1 && personRow != -1 && personCol != -1) {
            int personOld = countLine(notS, s, personRow, personCol);
            int personNow = countLine(notS, s, curRow, curCol);
            int robotOld = countLine(s, notS, robotRow, robotCol);
            
            int[] maxAround_personOld = countAround(notS, s, personRow, personCol);
            int[] maxAround_personNow = countAround(notS, s, curRow, curCol);
            int[] maxAround_robotOld = countAround(s, notS, robotRow, robotCol);
            int[] maxAround;
//            String tmpS = s;
//            String tmpNotS = notS;
            if (maxAround_personNow[0] >= maxAround_personOld[0]) {
                if (maxAround_robotOld[0] >= maxAround_personNow[0]) {
                    maxAround = maxAround_robotOld;
                } else {
                    maxAround = maxAround_personNow;
//                    tmpS = notS;
//                    tmpNotS = s;
                }
            } else {
                if (maxAround_robotOld[0] >= maxAround_personOld[0]) {
                    maxAround = maxAround_robotOld;
                } else {
                    maxAround = maxAround_personOld;
//                    tmpS = notS;
//                    tmpNotS = s;
                }
            }
            
            if (personNow >= personOld) {
                if (robotOld >= personNow) {
                    if (robotOld >= maxAround[0] || robotOld > 3) {
                        robotChoose(s, notS, robotRow, robotCol, s, notS);
                    } else {
                        jTable1.setValueAt(s, maxAround[1], maxAround[2]);
                        jTable1.changeSelection(maxAround[1], maxAround[2], false, false);
                        isWin(s, notS, maxAround[1], maxAround[2]);
                        if (countLine(s, notS, maxAround[1], maxAround[2]) >= countLine(s, notS, robotRow, robotCol)) {
                            robotRow = maxAround[1];
                            robotCol = maxAround[2];
                        }
                        turn = !turn;
                    }
                } else {
                    if (personNow >= maxAround[0] || personNow > 3) {
                        robotChoose(notS, s, curRow, curCol, s, notS);
                    } else {
                        jTable1.setValueAt(s, maxAround[1], maxAround[2]);
                        jTable1.changeSelection(maxAround[1], maxAround[2], false, false);
                        isWin(s, notS, maxAround[1], maxAround[2]);
                        if (countLine(s, notS, maxAround[1], maxAround[2]) >= countLine(s, notS, robotRow, robotCol)) {
                            robotRow = maxAround[1];
                            robotCol = maxAround[2];
                        }
                        turn = !turn;
                    }
                }
            } else {
                if (robotOld >= personOld) {
                    if (robotOld >= maxAround[0] || robotOld > 3) {
                        robotChoose(s, notS, robotRow, robotCol, s, notS);
                    } else {
                        jTable1.setValueAt(s, maxAround[1], maxAround[2]);
                        jTable1.changeSelection(maxAround[1], maxAround[2], false, false);
                        isWin(s, notS, maxAround[1], maxAround[2]);
                        if (countLine(s, notS, maxAround[1], maxAround[2]) >= countLine(s, notS, robotRow, robotCol)) {
                            robotRow = maxAround[1];
                            robotCol = maxAround[2];
                        }
                        turn = !turn;
                    }
                } else {
                    if (personOld >= maxAround[0] || personOld > 3) {
                        robotChoose(notS, s, personRow, personCol, s, notS);
                    } else {
                        jTable1.setValueAt(s, maxAround[1], maxAround[2]);
                        jTable1.changeSelection(maxAround[1], maxAround[2], false, false);
                        isWin(s, notS, maxAround[1], maxAround[2]);
                        if (countLine(s, notS, maxAround[1], maxAround[2]) >= countLine(s, notS, robotRow, robotCol)) {
                            robotRow = maxAround[1];
                            robotCol = maxAround[2];
                        }
                        turn = !turn;
                    }
                }
            }
        } else {
            robotChoose(notS, s, curRow, curCol, s, notS);
        }
        if (personRow != -1 && personCol != -1 && countLine(s, notS, curRow, curRow) >= countLine(s, notS, personRow, personCol)) {
            personRow = curRow;
            personCol = curRow;
        } else if (personRow == -1 && personCol == -1) {
            personRow = curRow;
            personCol = curRow;
        }
    }
    
    int[] countAround(String s, String notS, int x, int y) {
        int[] maxAround = new int[3];
        int max = 0;
        int row = -1;
        int col = -1;
        int tmp;
        int i;

        i = 1;
        while ((x + i) < 15) {
            if (jTable1.getValueAt(x + i, y) == null) {
                tmp = countLine(s, notS, x + i, y);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x + i;
                    col = y;
                }
                break;
            } else if (jTable1.getValueAt(x + i, y) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((x + 1) < 15 && jTable1.getValueAt(x + 1, y) == null) {
//            tmp = countLine(s, notS, x + 1, y);
//            if (tmp > max) {
//                max = tmp;
//                row = x + 1;
//                col = y;
//            }
//        }
        
        i = 1;
        while ((x - i) >= 0) {
            if (jTable1.getValueAt(x - i, y) == null) {
                tmp = countLine(s, notS, x - i, y);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x - i;
                    col = y;
                }
                break;
            } else if (jTable1.getValueAt(x - i, y) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((x - 1) >= 0 && jTable1.getValueAt(x - 1, y) == null) {
//            tmp = countLine(s, notS, x - 1, y);
//            if (tmp > max) {
//                max = tmp;
//                row = x - 1;
//                col = y;
//            }
//        }
        
        i = 1;
        while ((y + i) < 15) {
            if (jTable1.getValueAt(x, y + i) == null) {
                tmp = countLine(s, notS, x, y + i);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x;
                    col = y + i;
                }
                break;
            } else if (jTable1.getValueAt(x, y + i) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((y + 1) < 15 && jTable1.getValueAt(x, y + 1) == null) {
//            tmp = countLine(s, notS, x, y + 1);
//            if (tmp > max) {
//                max = tmp;
//                row = x;
//                col = y + 1;
//            }
//        }
        
        i = 1;
        while ((y - i) >= 0) {
            if (jTable1.getValueAt(x, y - i) == null) {
                tmp = countLine(s, notS, x, y - i);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x;
                    col = y - i;
                }
                break;
            } else if (jTable1.getValueAt(x, y - i) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((y - 1) >= 0 && jTable1.getValueAt(x, y - 1) == null) {
//            tmp = countLine(s, notS, x, y - 1);
//            if (tmp > max) {
//                max = tmp;
//                row = x;
//                col = y - 1;
//            }
//        }
        
        i = 1;
        while ((x + i) < 15 && (y - i) >= 0) {
            if (jTable1.getValueAt(x + i, y - i) == null) {
                tmp = countLine(s, notS, x + i, y - i);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x + i;
                    col = y - i;
                }
                break;
            } else if (jTable1.getValueAt(x + i, y - i) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((x + 1) < 15 && (y - 1) >= 0 && jTable1.getValueAt(x + 1, y - 1) == null) {
//            tmp = countLine(s, notS, x + 1, y - 1);
//            if (tmp > max) {
//                max = tmp;
//                row = x + 1;
//                col = y - 1;
//            }
//        }
        
        i = 1;
        while ((x - i) >= 0 && (y + i) < 15) {
            if (jTable1.getValueAt(x - i, y + i) == null) {
                tmp = countLine(s, notS, x - i, y + i);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x - i;
                    col = y + i;
                }
                break;
            } else if (jTable1.getValueAt(x - i, y + i) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((x - 1) >= 0 && (y + 1) < 15 && jTable1.getValueAt(x - 1, y + 1) == null) {
//            tmp = countLine(s, notS, x - 1, y + 1);
//            if (tmp > max) {
//                max = tmp;
//                row = x - 1;
//                col = y + 1;
//            }
//        }
        
        i = 1;
        while ((x - i) >= 0 && (y - i) >= 0) {
            if (jTable1.getValueAt(x - i, y - i) == null) {
                tmp = countLine(s, notS, x - i, y - i);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x - i;
                    col = y - i;
                }
                break;
            } else if (jTable1.getValueAt(x - i, y - i) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((x - 1) >= 0 && (y - 1) >= 0 && jTable1.getValueAt(x - 1, y - 1) == null) {
//            tmp = countLine(s, notS, x - 1, y - 1);
//            if (tmp > max) {
//                max = tmp;
//                row = x - 1;
//                col = y - 1;
//            }
//        }
        
        i = 1;
        while ((x + i) < 15 && (y + i) < 15) {
            if (jTable1.getValueAt(x + i, y + i) == null) {
                tmp = countLine(s, notS, x + i, y + i);
                if (tmp > max) {
                    max = tmp - 1;
                    row = x + i;
                    col = y + i;
                }
                break;
            } else if (jTable1.getValueAt(x + i, y + i) == s) {
                i++;
            } else {
                break;
            }
        }
//        if ((x + 1) < 15 && (y + 1) < 15 && jTable1.getValueAt(x + 1, y + 1) == null) {
//            tmp = countLine(s, notS, x + 1, y + 1);
//            if (tmp > max) {
//                max = tmp;
//                row = x + 1;
//                col = y + 1;
//            }
//        }
        if (row != -1 & col != -1) {
            maxAround[0] = max;
            maxAround[1] = row;
            maxAround[2] = col;
            return maxAround;
        } else {
            maxAround[0] = -1;
            maxAround[1] = -1;
            maxAround[2] = -1;
            return maxAround;
        }
    }
    
    private void robotChoose(String s, String notS, int x, int y, String X_or_O, String O_or_X) {
        short twoHeadLimit;
        short five;
        int i;
        int choosedRow = -1;
        int choosedCol = -1;
        int maxLine = 0;
        
        //hang ngang
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x + i) < 15 && jTable1.getValueAt(x + i, y) == s) {
            five++;
            i++;
        }
        if ((x + i) < 15 && jTable1.getValueAt(x + i, y) == notS) {
            twoHeadLimit++;
        }
        if ((x + i) < 15 && jTable1.getValueAt(x + i, y) == null) {
            if (countLine(s, notS, x + i, y) > maxLine) {
                maxLine = countLine(s, notS, x + i, y);
                choosedRow = x + i;
                choosedCol = y;
            }
        }
        
        i = 1;
        while ((x - i) >= 0 && jTable1.getValueAt(x - i, y) == s) {
            five++;
            i++;
        }
        if ((x - i) >= 0 && jTable1.getValueAt(x - i, y) == notS) {
            twoHeadLimit++;
        }
        if ((x - i) >= 0 && jTable1.getValueAt(x - i, y) == null) {
            if (countLine(s, notS, x - i, y) > maxLine) {
                maxLine = countLine(s, notS, x - i, y);
                choosedRow = x - i;
                choosedCol = y;
            }
        }
                
        //hang doc
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((y + i) < 15 && jTable1.getValueAt(x, y + i) == s) {
            five++;
            i++;
        }
        if ((y + i) < 15 && jTable1.getValueAt(x, y + i) == notS) {
            twoHeadLimit++;
        }
        if ((y + i) < 15 && jTable1.getValueAt(x, y + i) == null) {
            if (countLine(s, notS, x, y + i) > maxLine) {
                maxLine = countLine(s, notS, x, y + i);
                choosedRow = x;
                choosedCol = y + i;
            }
        }
        
        i = 1;
        while ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == s) {
            five++;
            i++;
        }
        if ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == notS) {
            twoHeadLimit++;
        }
        if ((y - i) >= 0 && jTable1.getValueAt(x, y - i) == null) {
            if (countLine(s, notS, x, y - i) > maxLine) {
                maxLine = countLine(s, notS, x, y - i);
                choosedRow = x;
                choosedCol = y - i;
            }
        }
                        
        //hang cheo /
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == s) {
            five++;
            i++;
        }
        if ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == notS) {
            twoHeadLimit++;
        }
        if ((x + i) < 15 && (y - i) >= 0 && jTable1.getValueAt(x + i, y - i) == null) {
            if (countLine(s, notS, x + i, y - i) > maxLine) {
                maxLine = countLine(s, notS, x + i, y - i);
                choosedRow = x + i;
                choosedCol = y - i;
            }
        }
        
        i = 1;
        while ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == s) {
            five++;
            i++;
        }
        if ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == notS) {
            twoHeadLimit++;
        }
        if ((x - i) >= 0 && (y + i) < 15 && jTable1.getValueAt(x - i, y + i) == null) {
            if (countLine(s, notS, x - i, y + i) > maxLine) {
                maxLine = countLine(s, notS, x - i, y + i);
                choosedRow = x - i;
                choosedCol = y + i;
            }
        }
        
        //hang cheo \
        twoHeadLimit = 0;
        five = 1;
        i = 1;
        while ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == s) {
            five++;
            i++;
        }
        if ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == notS) {
            twoHeadLimit++;
        }
        if ((x - i) >= 0 && (y - i) >= 0 && jTable1.getValueAt(x - i, y - i) == null) {
            if (countLine(s, notS, x - i, y - i) > maxLine) {
                maxLine = countLine(s, notS, x - i, y - i);
                choosedRow = x - i;
                choosedCol = y - i;
            }
        }
        
        i = 1;
        while ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == s) {
            five++;
            i++;
        }
        if ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == notS) {
            twoHeadLimit++;
        }
        if ((x + i) < 15 && (y + i) < 15 && jTable1.getValueAt(x + i, y + i) == null) {
            if (countLine(s, notS, x + i, y + i) > maxLine) {
                maxLine = countLine(s, notS, x + i, y + i);
                choosedRow = x + i;
                choosedCol = y + i;
            }
        }

        if (choosedRow != -1 && choosedCol != -1) {
            jTable1.setValueAt(X_or_O, choosedRow, choosedCol);
            jTable1.changeSelection(choosedRow, choosedCol, false, false);
            isWin(X_or_O, O_or_X, choosedRow, choosedCol);
            if (robotRow != -1 && robotCol != -1 && countLine(s, notS, choosedRow, choosedCol) >= countLine(s, notS, robotRow, robotCol)) {
                robotRow = choosedRow;
                robotCol = choosedCol;
            } else if (robotRow == -1 && robotCol == -1) {
                robotRow = choosedRow;
                robotCol = choosedCol;
            }
            turn = !turn;
        } else {
            for (int j = 0; j < 15; j++) {
                for (int k = 0; k < 15; k++) {
                    if (jTable1.getValueAt(j, k) == null) {
                        jTable1.setValueAt(X_or_O, j, k);
                        jTable1.changeSelection(j, k, false, false);
                        isWin(X_or_O, O_or_X, j, k);
                        if (robotRow != -1 && robotCol != -1 && countLine(s, notS, j, k) >= countLine(s, notS, robotRow, robotCol)) {
                            robotRow = j;
                            robotCol = k;
                        } else if (robotRow == -1 && robotCol == -1) {
                            robotRow = j;
                            robotCol = k;
                        }
                        turn = !turn;
                        return;
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "No one win! Again!");
            done = true;
            new Caro().setVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Caro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Caro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Caro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Caro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Caro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
